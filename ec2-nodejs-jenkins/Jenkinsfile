pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = 'docker-hub-credentials'
        SSH_CREDENTIALS = 'ssh-credentials'
        DOCKER_IMAGE = 'ratishjain/nodejs-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "‚úÖ Code checked out successfully"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ./server"
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    echo "‚úÖ Docker image built: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "üì§ Pushing to Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                    }
                    echo "‚úÖ Image pushed to Docker Hub"
                }
            }
        }
        
        stage('Deploy to App Server') {
            steps {
                script {
                    echo "üöÄ Deploying to App Server..."
                    
                    withCredentials([
                        string(credentialsId: 'bastion-host-ip', variable: 'BASTION_IP'),
                        string(credentialsId: 'app-server-ip', variable: 'APP_IP')
                    ]) {
                        sshAgent(['ssh-credentials']) {
                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@${BASTION_IP} "
                                    ssh -o StrictHostKeyChecking=no ubuntu@${APP_IP} '
                                        # Stop existing container
                                        docker stop nodejs-app || true
                                        docker rm nodejs-app || true
                                        
                                        # Pull latest image
                                        docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                                        
                                        # Run new container
                                        docker run -d --name nodejs-app -p 3000:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                                        
                                        # Clean up old images
                                        docker image prune -f
                                        
                                        echo \"‚úÖ App deployed successfully!\"
                                    '
                                "
                            """
                        }
                    }
                    echo "‚úÖ Deployment completed!"
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    echo "üè• Performing health check..."
                    
                    withCredentials([
                        string(credentialsId: 'bastion-host-ip', variable: 'BASTION_IP'),
                        string(credentialsId: 'app-server-ip', variable: 'APP_IP')
                    ]) {
                        sshAgent(['ssh-credentials']) {
                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@${BASTION_IP} "
                                    ssh -o StrictHostKeyChecking=no ubuntu@${APP_IP} '
                                        # Wait for app to start
                                        sleep 10
                                        
                                        # Check if container is running
                                        if docker ps | grep nodejs-app; then
                                            echo \"‚úÖ Container is running\"
                                            
                                            # Test the application
                                            if curl -f http://localhost:3000/health || curl -f http://localhost:3000/; then
                                                echo \"‚úÖ Application is responding\"
                                            else
                                                echo \"‚ùå Application is not responding\"
                                                exit 1
                                            fi
                                        else
                                            echo \"‚ùå Container is not running\"
                                            exit 1
                                        fi
                                    '
                                "
                            """
                        }
                    }
                    echo "‚úÖ Health check passed!"
                }
            }
        }
    }
    
    post {
        success {
            echo "üéâ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}